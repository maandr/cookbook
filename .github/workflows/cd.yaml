name: CD
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.editorconfig'
      - '.gitignore'
      - '.npmrc'
      - '.eslintrc.cjs'
      - '.eslintignore'
      - '.prettier.config.cjs'
      - '.vscode/**'

env:
  - SUBDOMAIN: cookbook
  - DOCKER_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 📥 Checkout Git Repository
        id: checkout-git-repository
        uses: actions/checkout@v3.3.0

      - name: ⚙️ Setup QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v2.1.0

      - name: ⚙️ Setup Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@v2.2.1

      - name: 💾 Cache Docker Layers
        id: chache-docker-layers
        uses: actions/cache@v3.2.3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 🔐 Login to GitHub Container Registry
        id: ghcr-login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CONTAINER_REGISTRY_PAT }}

      - name: 🐳 Docker Metadata
        id: docker-meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha

      - name: 🏗️ Build and publish
        id: docker-build-and-push
        uses: docker/build-push-action@v3.3.0
        with:
          push: true
          context: ./
          file: ./Dockerfile
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: build
    env:
      CONTAINER_NAME: cookbook
    steps:
      - name: ⚙️ Setup SSH
        id: worker-setup-ssh
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/remote.key
          chmod 600 ~/.ssh/remote.key
          cat >> ~/.ssh/config <<END
          Host remote
            HostName ${{ secrets.DEPLOY_HOST }}
            User ${{ secrets.DEPLOY_USERNAME }}
            IdentityFile ~/.ssh/remote.key
            StrictHostKeyChecking no
          END

      - name: 🔐 (SSH) Login to GitHub Container Registry
        id: remote-ghcr-login
        run: ssh remote 'echo ${{ secrets.CONTAINER_REGISTRY_PAT }} | docker login ghcr.io --username ${{ github.repository_owner }} --password-stdin'

      - name: 🐳 (SSH) Pull Docker Image
        id: remote-pull-docker-image
        run: ssh remote 'docker pull ${{ env.DOCKER_IMAGE }}:main'

      - name: ✋ (SSH) Stop the running container
        id: remote-stop-docker-container
        run: ssh remote 'docker rm -f ${{ env.CONTAINER_NAME }}'

      - name: 🚀 (SSH) Start the new container
        id: remote-start-docker-container
        run: ssh remote 'docker run --detach --name ${{ env.CONTAINER_NAME }} --rm --network=infra-network --env VIRTUAL_HOST=$SUBDOMAIN.${{ secrets.DEPLOY_HOST }} --env LETSENCRYPT_HOST=$SUBDOMAIN.${{ secrets.DEPLOY_HOST }} ${{ env.DOCKER_IMAGE }}:main'

      - name: 🧹 (SSH) Prune docker images
        id: remote-prune-images
        run: ssh remote docker image prune -f'

  smoke-test:
    runs-on: ubuntu-latest
    environment: production
    needs: deploy
    steps:
      - name: 🧪 Ensure app is accessible under subdomain
        id: curl-app
        run: curl -X GET "https://$SUBDOMAIN.${{ secrets.DEPLOY_HOST }}"
